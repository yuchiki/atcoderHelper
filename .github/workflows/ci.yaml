---
name: golang-ci
on:  # yamllint disable-line rule:truthy
  push:
    branches:
      - master
  pull_request:
jobs:
  build:
    name: build
    strategy:
      matrix:
        go-version: ["1.14"]
        os: [ubuntu-latest]
    runs-on: ${{matrix.os}}
    steps:
      - uses: actions/checkout@v2
      - name: enable problem matcher
        run: echo "::add-matcher::.github/problem-matcher.json"
      - name: setup go
        uses: actions/setup-go@v1
        with:
          go-version: ${{matrix.go-version}}
      - name: build
        run: make build
  test:
    name: test
    strategy:
      matrix:
        go-version: ["1.14"]
        os: [ubuntu-latest]
    runs-on: ${{matrix.os}}
    steps:
      - uses: actions/checkout@v2
      - name: enable problem matcher
        run: echo "::add-matcher::.github/problem-matcher.json"
      - name: setup go
        uses: actions/setup-go@v1
        with:
          go-version: ${{matrix.go-version}}
      - name: test
        run: go test ./...
  lint:
    name: lint
    runs-on: ubuntu-latest  # lintはコードの問題なので、意図的に1環境でしかテストしない
    steps:
      - uses: actions/checkout@v2
      - name: enable problem matcher
        run: echo "::add-matcher::.github/problem-matcher.json"
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: v1.43.0
      - name: yamllint
        uses: ibiqlik/action-yamllint@v3
      - name: setup go
        uses: actions/setup-go@v1
        with:
          go-version: "1.14"
      - name: go mod tidy
        run: go mod tidy
      - name: no diff
        run: git diff --exit-code
  docs:
    name: docs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: setup go
        uses: actions/setup-go@v1
        with:
          go-version: "1.14"
      - name: generate documents
        run: make generate-docs
      - name: no diff
        run: git diff --exit-code
  integration-test:
    name: integration-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: run integration_test.sh
        run: sh ./integration_test.sh
  go-relese:
    name: go-release
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: setup go
        uses: actions/setup-go@v1
        with:
          go-version: 1.14
      - name: release
        uses: goreleaser/goreleaser-action@v2.0.0
        with:
          version: latest
          args: release --snapshot --skip-publish --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  notification:
    name: notification
    if: always()
    #    if: always() && github.event.event_name == 'push'
    needs:
      - build
      - test
      - lint
      - docs
      - integration-test
    runs-on: ubuntu-latest
    steps:
      - uses: technote-space/workflow-conclusion-action@v1
      - name: set send message
        id: create-send-message
        run: |
          if [ ${{env.WORKFLOW_CONCLUSION}} != success ]; then
            echo -n "::set-output name=message::"
            echo -n "<@${{secrets.DISCORD_NOTIFICATION_ID}}>"
          fi
      - name: notify to discord
        uses: sarisia/actions-status-discord@v1
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          status: ${{ env.WORKFLOW_CONCLUSION }}
          description: ${{ steps.create-send-message.outputs.message }}
